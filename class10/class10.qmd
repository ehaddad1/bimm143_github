---
title: "Class 10 Structural Bioinformatics"
author: "Eli Haddad A16308227"
format: pdf
---

# 1) Introduction to the RCSB Protein Data Bank (PDB)

First let's see what is in the PDB database - the main repository of protein structures.

Downloaded composition stats from: https://www.rcsb.org/stats/summary

For context: Release 2023_24 of 13-Sep-2023 of UniProtKB/TrEMBL contains 251600,768 sequence entries. The PDB only contains 183,201

```{r}
stats <- read.csv("Data Export Summary.csv", row.names = 1)
stats

```

There is a problem there due to the commas in the numbers. This causes R to treat them as characters.

```{r}
x <- stats$X.ray
x
```
```{r}
as.numeric(gsub(",","", x))
```
```{r}
rm.comma <- function(x) {
  as.numeric(gsub(",","", x))
}
```

```{r}
rm.comma(stats$EM)
```

I can use `apply()` to fix the whole table...

```{r}
pdbstats <- apply(stats, 2, rm.comma)
rownames(pdbstats) <- rownames(stats)
head(pdbstats)
```

> Q1: What percentage of structures in the PDB are solved by X-Ray and Electron Microscopy.

```{r}
totals <- apply(pdbstats, 2, sum)
round(totals / totals["Total"] * 100, 2)
```

> Q2: What proportion of structures in the PDB are protein?

```{r}
round(pdbstats[, "Total"] / sum(pdbstats[,"Total"]) * 100, 2)

```

> Q3: Type HIV in the PDB website search box on the home page and determine how many HIV-1 protease structures are in the current PDB?

SKIPPED for time!!


Protein structures in PDB as a function of UniProt sequences.

```{r}
round((pdbstats[1,"Total"] /251600768) * 100, 2)
```


> Q4: Water molecules normally have 3 atoms. Why do we see just one atom per water molecule in this structure?

The resolution (2 Angstroms) is not small enough in order to capture the small size of the hydrogen atoms. That is why hydrogen is not seen anywhere in these structures. You need 1 Angstrom or better to see these smaller atoms.

> Q5: There is a critical “conserved” water molecule in the binding site. Can you identify this water molecule? What residue number does this water molecule have

This water molecule is called HOH 308. It is important for making direct interactions with the ligand and with the protein.

> Q6: Generate and save a figure clearly showing the two distinct chains of HIV-protease along with the ligand. You might also consider showing the catalytic residues ASP 25 in each chain and the critical water (we recommend “Ball & Stick” for these side-chains). Add this figure to your Quarto document.

Here is a lovely figure of HIP-Pr with the catalytic ASP residues, the MK1 compound and the all important water 308

![](1HSG.png)


## The bio3d package for structural bioinformatics

```{r}
library(bio3d)

pdb <- read.pdb("1hsg")
pdb
```
```{r}
head(pdb$atom)
```


# Predicting functional motions of a single structure

Let's finish today with a bioinformatics calculation to predict the functional motions of a PDB structure. 


```{r}
adk <- read.pdb("6s36")
m <- nma(adk)
```

```{r}
plot(m)
mktrj(m, file="adk_m7.pdb")
```
# 4. Comparative structure analysis of Adenylate Kinase

We need some packages for todays class. These include `bio3d` and `msa`

The `msa` package is from BioConductor. These packages focus on genomics type work and are managed by the `BiocManager` package.

Install `install.packages("BiocManager")` and then `BiocManager:install("msa")` all entered in the R "brain" console.

```{r}
library(bio3d)

aa <- get.seq("1ake_A")
aa
```

Now I can search for the PDB database for related sequences:
```{r}
#b <- blast.pdb(aa)
```

```{r}
#hits <- plot(b)
```
```{r}
#attributes(b)
#head(b)
```
These are the related structures in the PDB database that we found via a BLAST search...

```{r}

hits <- NULL
hits$pdb.id <- c('1AKE_A','6S36_A','6RZE_A','3HPR_A','1E4V_A','5EJE_A','1E4Y_A','3X2S_A','6HAP_A','6HAM_A','4K46_A','3GMT_A','4PZL_A')
```


>Q10. Which of the packages above is found only on BioConductor and not CRAN?

The `msa` package is found only in BioConductor and not CRAN.

> Q11. Which of the above packages is not found on BioConductor or CRAN?:

The `Grantlab/bio3d-view` is installed using devtools, so this is not found on BioConductor or CRAN.

> Q12. True or False? Functions from the devtools package can be used to install packages from GitHub and BitBucket?

True

> Q13. How many amino acids are in this sequence, i.e. how long is this sequence?

There are 214 amino acids in this sequence.


Side-note: Lets annotate these structures (in other words find out what they are, what species they are from, stuff about the experiment they were solve in etc.)

For this we can use the `pdb.annotate()`

```{r}
anno <- pdb.annotate(hits$pdb.id)
```

```{r}
#attributes(anno)
head(anno)
```

Now we can download all these structures for further analysis with the `get.pdb()` function.

```{r}
# Download related PDB files
files <- get.pdb(hits$pdb.id, path="pdbs", split=TRUE, gzip=TRUE)
```

Now we have all these related structures we can Align and Superpose

```{r}
# Align releated PDBs
pdbs <- pdbaln(files, fit = TRUE, exefile="msa")
pdbs
```

## Principal Component Analysis

```{r}
# Perform PCA
pc.xray <- pca(pdbs)
plot(pc.xray)
```


```{r}
pc1 <- mktrj(pc.xray, pc=1, file="pc_1.pdb")
```


Monomer

![](HIVPR_MONOMER_94B5B_UNRELAXED_RANK_001_ALPHAFOLD2_PTM_MODEL_5_SEED_000.PDB-HIVPR_MONOMER_94B5B_UNRELAXED_RANK_002_ALPHAFOLD2_PTM_MODEL_4_SEED_000.PDB-HIVPR_MONOMER_94B5B_UNRELAXED_RANK_003_ALPHAFOLD2_PTM_MODEL_1_SEED_000.PDB-HIVPR_MONOMER_9.png)
Dimer 
![](HIVPR_DIMER_23119_UNRELAXED_RANK_001_ALPHAFOLD2_MULTIMER_V3_MODEL_1_SEED_000.PDB-HIVPR_DIMER_23119_UNRELAXED_RANK_002_ALPHAFOLD2_MULTIMER_V3_MODEL_5_SEED_000.PDB-HIVPR_DIMER_23119_UNRELAXED_RANK_003_ALPHAFOLD2_MULTIMER_V3_MODEL_4_SEED_000.P.png)
# 8. Custom analysis of resulting models

```{r}
results_dir <- "hivpr_dimer_23119"
pdb_files <- list.files(path=results_dir,
                        pattern="*.pdb",
                        full.names = TRUE)
pdb_files
```

```{r}
library(bio3d)

pdbs <- pdbaln(pdb_files, fit=TRUE, exefile="msa")
```
```{r}
pdbs
```
```{r}
rd <- rmsd(pdbs)
range(rd)
```


```{r}
library(pheatmap)

colnames(rd) <- paste0("m",1:5)
rownames(rd) <- paste0("m",1:5)
pheatmap(rd)
```
```{r}

pdb <- read.pdb("1hsg")
plotb3(pdbs$b, typ="l", lwd=2, sse=pdb)
points(pdbs$b[2,], typ="l", col="red")
points(pdbs$b[3,], typ="l", col="blue")
points(pdbs$b[4,], typ="l", col="darkgreen")
points(pdbs$b[5,], typ="l", col="orange")
abline(v=100, col="gray")
```

```{r}
core <- core.find(pdbs)
core.inds <- print(core, vol=0.5)
xyz <- pdbfit(pdbs, core.inds, outpath="corefit_structures")
```

Core superposed structure

![](corefit.png)
```{r}
rd <- rmsd(xyz)

colnames(rd) <- paste0("m",1:5)
rownames(rd) <- paste0("m",1:5)
pheatmap(rd)
```

```{r}
rf <- rmsf(xyz)

plotb3(rf, sse=pdb)
abline(v=100, col="gray", ylab="RMSF")
```

## Predicted Alignment Error for domains

```{r}

library(jsonlite)

pae_files <- list.files(path=results_dir,
                        pattern=".*model.*\\.json",
                        full.names = TRUE)
```

1st and 5th files for example

```{r}
pae1 <- read_json(pae_files[1],simplifyVector = TRUE)
pae5 <- read_json(pae_files[5],simplifyVector = TRUE)

attributes(pae1)
```

```{r}
# Per-residue pLDDT scores 
#  same as B-factor of PDB..
head(pae1$plddt) 
```
```{r}
pae1$max_pae
```
```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)")
```
```{r}
plot.dmat(pae5$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))
```

Model 1 plot with the same Z-range

```{r}
plot.dmat(pae1$pae, 
          xlab="Residue Position (i)",
          ylab="Residue Position (j)",
          grid.col = "black",
          zlim=c(0,30))

```
## Residue conservation from alignment file

```{r}
aln_file <- list.files(path=results_dir,
                       pattern=".a3m$",
                        full.names = TRUE)
aln_file
```

```{r}
aln <- read.fasta(aln_file[1], to.upper = TRUE)
```

Amount of sequences in this alignment
```{r}
dim(aln$ali)
```

Score of residue conservation

```{r}
sim <- conserv(aln)
plotb3(sim, sse=trim.pdb(pdb, chain="A"))
```

Conserved Active Site residue D25, T26, G27, A28

```{r}
con <- consensus(aln, cutoff = 0.9)
con$seq
```

Mapping the conservation score to the Occupancy column of a PDB file

```{r}
count = 0
for (pdb in pdb_files) {
  count = count + 1
  print(pdb)
  m1.pdb <- read.pdb(pdb)
  occ <- vec2resno(c(sim[1:99], sim[1:99]), m1.pdb$atom$resno)
  write.pdb(m1.pdb, o=occ, file=paste(count,"_conserv.pdb",sep=""))
}

```

![](M1_CONSERV.PDB.png)





